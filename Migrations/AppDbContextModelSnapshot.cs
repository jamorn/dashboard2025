// <auto-generated />
using System;
using BackendAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendAPI.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Availability")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Giveaway")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<decimal>("OEE")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Performance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Quality")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Dashboards", t =>
                        {
                            t.HasCheckConstraint("CK_Dashboard_Availability", "[Availability] >= 0 AND [Availability] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Giveaway", "[Giveaway] >= 0 AND [Giveaway] <= 25.30");

                            t.HasCheckConstraint("CK_Dashboard_OEE", "[OEE] >= 0 AND [OEE] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Performance", "[Performance] >= 0 AND [Performance] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Quality", "[Quality] >= 0 AND [Quality] <= 100");
                        });
                });

            modelBuilder.Entity("BackendAPI.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<bool>("MachineActive")
                        .HasColumnType("bit");

                    b.Property<string>("MachineClass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MachineId");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            MachineId = 1,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PP12/A"
                        },
                        new
                        {
                            MachineId = 2,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PP12/C"
                        },
                        new
                        {
                            MachineId = 3,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PP3/A"
                        },
                        new
                        {
                            MachineId = 4,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PP3/B"
                        },
                        new
                        {
                            MachineId = 5,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PPE/C"
                        },
                        new
                        {
                            MachineId = 6,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PPE/D"
                        },
                        new
                        {
                            MachineId = 7,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PPC/A"
                        },
                        new
                        {
                            MachineId = 8,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "PPC/B"
                        },
                        new
                        {
                            MachineId = 9,
                            MachineActive = true,
                            MachineClass = "g1",
                            MachineName = "HDPE/A"
                        });
                });

            modelBuilder.Entity("BackendAPI.Models.Machine", b =>
                {
                    b.OwnsMany("BackendAPI.Models.RemarkItem", "RemarkItems", b1 =>
                        {
                            b1.Property<int>("MachineId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("ItemText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("RecordDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("MachineId", "Id");

                            b1.ToTable("RemarkItems");

                            b1.WithOwner("Machine")
                                .HasForeignKey("MachineId");

                            b1.Navigation("Machine");
                        });

                    b.Navigation("RemarkItems");
                });
#pragma warning restore 612, 618
        }
    }
}
