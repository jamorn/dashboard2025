// <auto-generated />
using System;
using BackendAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackendAPI.Models.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Availability")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Giveaway")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<decimal>("OEE")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Performance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Quality")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResponsiblePerson")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MachineId", "RecordDate")
                        .IsUnique();

                    b.ToTable("Dashboards", t =>
                        {
                            t.HasCheckConstraint("CK_Dashboard_Availability", "[Availability] >= 0 AND [Availability] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Giveaway", "[Giveaway] >= 0 AND [Giveaway] <= 25.30");

                            t.HasCheckConstraint("CK_Dashboard_OEE", "[OEE] >= 0 AND [OEE] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Performance", "[Performance] >= 0 AND [Performance] <= 100");

                            t.HasCheckConstraint("CK_Dashboard_Quality", "[Quality] >= 0 AND [Quality] <= 100");
                        });
                });

            modelBuilder.Entity("BackendAPI.Models.KPI", b =>
                {
                    b.Property<int>("Item")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Item"));

                    b.Property<decimal?>("GiveAwayMax")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("GiveAwayMin")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("GiveAway_Target")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Oee_Target")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("Waste_Film_Target")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Waste_Pellet_Target")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Item");

                    b.HasIndex("UnitId");

                    b.ToTable("KPI");
                });

            modelBuilder.Entity("BackendAPI.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineId"));

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("MachineActive")
                        .HasColumnType("bit");

                    b.Property<string>("MachineClass")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MachineLine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MachineId");

                    b.HasIndex("CostCenter");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("BackendAPI.Models.RemarkItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ItemText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MachineId", "RecordDate");

                    b.ToTable("RemarkItems");
                });

            modelBuilder.Entity("BackendAPI.Models.UnitPLBG", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UnitId");

                    b.ToTable("UnitPLBG");
                });

            modelBuilder.Entity("BackendAPI.Models.Dashboard", b =>
                {
                    b.HasOne("BackendAPI.Models.Machine", "Machine")
                        .WithMany("Dashboards")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BackendAPI.Models.KPI", b =>
                {
                    b.HasOne("BackendAPI.Models.UnitPLBG", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .HasPrincipalKey("CostCenter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BackendAPI.Models.Machine", b =>
                {
                    b.HasOne("BackendAPI.Models.UnitPLBG", "Unit")
                        .WithMany("Machines")
                        .HasForeignKey("CostCenter")
                        .HasPrincipalKey("CostCenter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BackendAPI.Models.RemarkItem", b =>
                {
                    b.HasOne("BackendAPI.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendAPI.Models.Dashboard", "Dashboard")
                        .WithMany("RemarkItems")
                        .HasForeignKey("MachineId", "RecordDate")
                        .HasPrincipalKey("MachineId", "RecordDate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("BackendAPI.Models.Dashboard", b =>
                {
                    b.Navigation("RemarkItems");
                });

            modelBuilder.Entity("BackendAPI.Models.Machine", b =>
                {
                    b.Navigation("Dashboards");
                });

            modelBuilder.Entity("BackendAPI.Models.UnitPLBG", b =>
                {
                    b.Navigation("Machines");
                });
#pragma warning restore 612, 618
        }
    }
}
